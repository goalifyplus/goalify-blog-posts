/**
 * Generated by generator-naujs
 */

console.time('Gulp init time');
const path = require('path');
const gulp = require('gulp');
const runSequence = require('run-sequence');
const autoprefixer = require('autoprefixer');
const del = require('del');
const browserSync = require('browser-sync').create();
const fs = require('fs');

// Auto load gulp plugins
// gulp plugins are lazy loaded and auto attached to this `g` namspace
// with camelCase naming from the package name, ie. gulp-sass -> g.sass()
const g = require('gulp-load-plugins')();

console.timeEnd('Gulp init time');

/**
 * Configs
 */
let mode = 'dev';
const paths = {
	src: 'themes/goalify/source/',
	dist: 'public',
	assets: 'assets',
	// subfolders:
	fonts: 'fonts',
	images: 'img',
	mock: 'mock',
	scripts: 'js',
	styles: 'css',
	// temporary
	tmp: '.tmp',
};

// other path shorthands
paths.srcFonts = `${paths.src}/${paths.fonts}`;
paths.srcImages = `${paths.src}/${paths.images}`;
paths.srcScripts = `${paths.src}/${paths.scripts}`;
paths.srcStyles = `${paths.src}/${paths.styles}`;
paths.distFonts = `${paths.dist}/${paths.fonts}`;
paths.distImages = `${paths.dist}/${paths.images}`;
paths.distScripts = `${paths.dist}/${paths.scripts}`;
paths.distStyles = `${paths.dist}/${paths.styles}`;


/**
 * Task: iconfont
 * Generate icon font from assets/icons SVG folder
 */

gulp.task('iconfont', () => {
	const fontName = 'icons';

	gulp.src([path.join(paths.assets, '/icons/*.svg')])
		.pipe(g.iconfont({
			fontName,
			// autohint: true,
			formats: ['ttf', 'eot', 'woff2', 'woff'],
		}))
		.on('glyphs', (glyphs) => {
			const opts = {
				glyphs: glyphs.map((glyph) => (
					// this line is needed because gulp-iconfont has changed the api from 2.0
					{ name: glyph.name, codepoint: glyph.unicode[0].charCodeAt(0) }
				)),
				className: 'icon',
				fontName,
				fontPath: paths.srcFonts,
			};

			// generate _icons.scss
			gulp.src('assets/iconfont-templates/_icons.scss')
				.pipe(g.consolidate('lodash', opts))
				.pipe(gulp.dest(`${paths.srcStyles}/common`)); // change icons.scss output folder here

			// // generate icons.html for previewing
			gulp.src('assets/iconfont-templates/icons.html')
				.pipe(g.consolidate('lodash', opts))
				.pipe(gulp.dest('assets/')); // set path to export your sample HTML
		})
		.pipe(gulp.dest(paths.srcFonts)); // set path to generate the font file to
});

// ----------------------------------------------------------------------------

/**
 * Task: html
 * Merge JS and CSS using useref
 */
gulp.task('html', () => {
	const assets = g.useref.assets({ searchPath: [paths.src] });

	return gulp.src(path.join(paths.src, '/*.html'))
		.pipe(assets)
		// .pipe(g.if('*.js', uglify())) //no uglify yet
		.pipe(assets.restore())
		.pipe(g.useref())
		.pipe(gulp.dest(paths.dist));
});


// ----------------------------------------------------------------------------

function handleError(err) {
	console.log(err.toString());
	this.emit('end');
}

/**
 * Task: styles
 * compile sass, add browser prefix
 */
gulp.task('styles', () => (
	gulp.src(path.join(paths.srcStyles, '/*.scss'))
		.pipe(g.sourcemaps.init())
		.pipe(g.plumber({ errorHandler: handleError }))
		.pipe(g.sass({
			outputStyle: (mode === 'dev') ? 'expanded' : 'compressed',
			precision: 10,
			includePaths: ['.'],
			onError: console.error.bind(console, 'Sass error:'),
		}))
		.pipe(g.postcss([
			autoprefixer({ browsers: ['last 2 version', 'ie >= 9', 'android >= 4', 'safari >= 7'] }),
		]))
		.pipe(g.if(mode === 'dev', g.sourcemaps.write()))
		.pipe(gulp.dest(paths.srcStyles))
		// .pipe( g.if(mode !== 'dev', gulp.dest(paths.distStyles)) )
		.pipe(browserSync.stream())
));

// ----------------------------------------------------------------------------

/**
 * Task: lint
 * Lint javascript with eslint
 */
gulp.task('lint', g.shell.task('npm test'));

// ----------------------------------------------------------------------------

/**
 * Task: copy-images
 * Minify and copy UI images to dist
 */
gulp.task('copy-images', () => (
	gulp.src(path.join(paths.srcImages, '**/*'))
		// .pipe(g.cache(g.imagemin({
		// 	progressive: true,
		// 	interlaced: true,
		// 	// don't remove IDs from SVGs, they are often used
		// 	// as hooks for embedding and styling
		// 	svgoPlugins: [{cleanupIDs: false}]
		// })))
		.pipe(gulp.dest(paths.distImages))
));

// ----------------------------------------------------------------------------

/**
 * Task: copy-fonts
 * Copy fonts
 */
gulp.task('copy-fonts', () => (
	gulp.src(path.join(paths.srcFonts, '/**/*'))
		.pipe(gulp.dest(paths.distFonts))
));

// ----------------------------------------------------------------------------

/**
 * Task: copy-extras
 * copy extra files in root folder (.htaccess, robot.txt, favicon.ico...)
 */
gulp.task('copy-extras', () => (
	gulp.src([
		path.join(paths.src, '/*.*'),
		path.join(`!${paths.src}`, '/*.html'),
	], {
		dot: true,
		base: 'html',
	}).pipe(gulp.dest(paths.dist))
));

// ----------------------------------------------------------------------------

/**
 * Task: clean
 * Clean compiled folders
 */
gulp.task('clean', del.bind(null, [paths.dist, paths.tmp]));

// ----------------------------------------------------------------------------

/**
 * Task: watch
 * Watch for changes
 */
gulp.task('watch', ['styles'], () => {
	// watch for HTML / JS changes
	// gulp.watch([
	// 	path.join('source/**/*.html'),
	// 	path.join('source/**/*.js'),
	// 	path.join('themes/**/*.html'),
	// 	path.join('themes/**/*.js')
	// ], function(event) {
	// 	browserSync.reload(event.path);
	// });
	// gulp.watch(appSrc, function(/*event*/) {
	// 	gulp.start('lint');
	// });

	// watch for SCSS changes
	gulp.watch(path.join(paths.src, '/css/**/*.scss'), () => {
		gulp.start('styles');
	});
});

// ----------------------------------------------------------------------------

// Browser sync init boilerplate
function browserSyncInit(baseDir, browser) {
	const br = browser === undefined ? 'default' : browser;

	let routes = null;
	if (baseDir === paths.src || (Array.isArray(baseDir) && baseDir.indexOf(paths.src) !== -1)) {
		routes = {
			'/bower_components': 'bower_components',
		};
	}

	const server = {
		baseDir,
		routes,
	};

	/*
	 * You can add a proxy to your backend by uncommenting the line bellow.
	 * You just have to configure a context which will we redirected and the target url.
	 * Example: $http.get('/users') requests will be automatically proxified.
	 *
	 * For more details and option, https://github.com/chimurai/http-proxy-middleware/blob/v0.0.5/README.md
	 */
	// server.middleware = proxyMiddleware('/users', {target: 'http://jsonplaceholder.typicode.com', proxyHost: 'jsonplaceholder.typicode.com'});

	browserSync.instance = browserSync.init({
		startPath: '/',
		server,
		browser: br,
	});
}

/**
 * Task: serve
 * Serve the app through localhost with browsersync for testing
 */
gulp.task('serve', ['watch'], g.shell.task('hexo server', { verbose: true }));

gulp.task('serve-public', ['watch'], () => {
	browserSyncInit([paths.tmp, 'public/']);
});

// ----------------------------------------------------------------------------
gulp.task('generate', g.shell.task('hexo generate', { verbose: true }));

/**
 * Task: replace :lang/index.html
 *
 */
gulp.task('fixIndex', (cb) => {
	const viHomePath = 'public/vi/home.html';
	const viIndexPath = 'public/vi/index.html';
	if (fs.existsSync(viHomePath)) {
		fs.unlink(viIndexPath, (err) => {
			if (err) {
				throw err;
			}
			fs.renameSync(viHomePath, viIndexPath);
			cb();
		});
	}
});

/**
 * Task: build
 * build to public folder
 *
 */
gulp.task('build', ['clean'], (cb) => {
	mode = 'dist';
	runSequence('styles', 'generate', 'fixIndex', cb);
});

// FIXME: NOT tested
gulp.task('report', ['build'], () => (
	gulp.src('dist/**/*').pipe(g.size({ title: 'build', gzip: true }))
));


// ----------------------------------------------------------------------------
/**
 * Default task
 */
gulp.task('default', () => {
	console.log('\nNau16 Website - Gulp Command List');
	console.log('------------------------------------');
	console.log('gulp serve      : Preview static HTML site with files watch');
	console.log('gulp iconfont   : Generate icon font');
	console.log('gulp styles     : Compile styles');
	console.log('gulp lint       : Compile Handlebars template for Angular app');
	console.log('gulp build      : Compile and optimize script for deployment');
	console.log('------------------------------------\n');
});
